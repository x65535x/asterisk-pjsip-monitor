<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Logs - <%= sectionName %></title>
  <style>
    body { 
      font-family: 'Courier New', monospace;
      margin: 0;
      padding: 20px;
      background: #1e1e1e;
      color: #d4d4d4;
    }
    .header {
      background: #2d2d30;
      padding: 15px 20px;
      margin: -20px -20px 20px -20px;
      border-bottom: 1px solid #3e3e42;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .header h1 {
      margin: 0;
      color: #4fc3f7;
      font-size: 1.5em;
    }
    .controls {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .btn {
      padding: 8px 16px;
      border: 1px solid #464647;
      background: #3c3c3c;
      color: #cccccc;
      border-radius: 4px;
      cursor: pointer;
      text-decoration: none;
      font-size: 0.9em;
      transition: background-color 0.2s;
    }
    .btn:hover {
      background: #464647;
    }
    .btn.active {
      background: #007acc;
      border-color: #007acc;
    }
    
    .log-container {
      background: #1e1e1e;
      border: 1px solid #3e3e42;
      border-radius: 4px;
      height: 80vh;
      overflow-y: auto;
      padding: 15px;
      font-size: 13px;
      line-height: 1.4;
    }
    
    .log-entry {
      margin-bottom: 5px;
      padding: 5px;
      border-radius: 3px;
      word-wrap: break-word;
    }
    .log-entry:hover {
      background: #2d2d30;
    }
    
    .log-timestamp {
      color: #608b4e;
      font-weight: bold;
    }
    .log-level-error {
      color: #f44747;
      background: rgba(244, 71, 71, 0.1);
    }
    .log-level-warning {
      color: #ffcc02;
      background: rgba(255, 204, 2, 0.1);
    }
    .log-level-notice {
      color: #4fc3f7;
      background: rgba(79, 195, 247, 0.1);
    }
    .log-level-debug {
      color: #888888;
    }
    
    .log-source {
      color: #c586c0;
    }
    
    .connection-status {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 0.9em;
    }
    .status-dot {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: #f44747;
    }
    .status-dot.connected {
      background: #73c991;
    }
    
    .filter-controls {
      margin-bottom: 15px;
      padding: 10px;
      background: #2d2d30;
      border-radius: 4px;
      display: flex;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }
    .filter-group {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    .filter-group label {
      color: #cccccc;
      font-size: 0.9em;
    }
    .filter-group input, .filter-group select {
      background: #3c3c3c;
      border: 1px solid #464647;
      color: #cccccc;
      padding: 4px 8px;
      border-radius: 3px;
    }
    
    .stats {
      display: flex;
      gap: 20px;
      font-size: 0.9em;
      color: #888888;
    }
    
    .clear-btn {
      background: #d73a49;
      border-color: #d73a49;
    }
    .clear-btn:hover {
      background: #b31d28;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üìã Real-time Logs - <%= sectionName %></h1>
    <div class="controls">
      <div class="connection-status">
        <div class="status-dot" id="connectionStatus"></div>
        <span id="connectionText">Connecting...</span>
      </div>
      <button class="btn" onclick="toggleAutoScroll()" id="autoScrollBtn">Auto Scroll</button>
      <button class="btn clear-btn" onclick="clearLogs()">Clear</button>
      <a href="/" class="btn">‚Üê Back to Sections</a>
    </div>
  </div>

  <div class="filter-controls">
    <div class="filter-group">
      <label>Filter:</label>
      <input type="text" id="filterText" placeholder="Search in logs..." onkeyup="applyFilter()">
    </div>
    <div class="filter-group">
      <label>Level:</label>
      <select id="levelFilter" onchange="applyFilter()">
        <option value="">All</option>
        <option value="ERROR">Error</option>
        <option value="WARNING">Warning</option>
        <option value="NOTICE">Notice</option>
        <option value="DEBUG">Debug</option>
      </select>
    </div>
    <div class="filter-group">
      <label>Source:</label>
      <select id="sourceFilter" onchange="applyFilter()">
        <option value="">All</option>
        <option value="PJSIP">PJSIP</option>
        <option value="res_pjsip">res_pjsip</option>
        <option value="app_dial">app_dial</option>
      </select>
    </div>
    <div class="stats">
      <span>Total: <span id="totalLogs">0</span></span>
      <span>Filtered: <span id="filteredLogs">0</span></span>
      <span>Rate: <span id="logRate">0</span>/min</span>
    </div>
  </div>

  <div class="log-container" id="logContainer"></div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const sectionName = '<%= sectionName %>';
    const logContainer = document.getElementById('logContainer');
    
    let logs = [];
    let autoScroll = true;
    let logCount = 0;
    let lastMinute = Date.now();
    let logsThisMinute = 0;
    
    socket.on('connect', () => {
      console.log('Connected to log monitoring');
      updateConnectionStatus(true);
      socket.emit('subscribeLogs', sectionName);
    });
    
    socket.on('disconnect', () => {
      console.log('Disconnected from log monitoring');
      updateConnectionStatus(false);
    });
    
    socket.on('logUpdate', (logData) => {
      if (isRelevantLog(logData.message, sectionName)) {
        addLogEntry(logData);
        updateStats();
      }
    });
    
    function isRelevantLog(message, section) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏
      return message.includes(section) || 
             message.includes(`${section}-ep`) ||
             message.includes(`${section}-auth`) ||
             message.includes(`${section}-reg`) ||
             message.includes(`${section}-aor`) ||
             message.includes(`PJSIP/${section}`) ||
             (message.includes('PJSIP') && message.includes('endpoint')) ||
             message.includes('res_pjsip');
    }
    
    function addLogEntry(logData) {
      const entry = {
        id: Date.now() + Math.random(),
        timestamp: logData.timestamp,
        message: logData.message,
        file: logData.file,
        level: extractLogLevel(logData.message),
        source: extractSource(logData.message)
      };
      
      logs.push(entry);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
      if (logs.length > 1000) {
        logs = logs.slice(-500);
        renderLogs();
      } else {
        appendLogEntry(entry);
      }
      
      if (autoScroll) {
        logContainer.scrollTop = logContainer.scrollHeight;
      }
      
      logCount++;
      logsThisMinute++;
    }
    
    function extractLogLevel(message) {
      if (message.includes('ERROR')) return 'ERROR';
      if (message.includes('WARNING')) return 'WARNING';
      if (message.includes('NOTICE')) return 'NOTICE';
      if (message.includes('DEBUG')) return 'DEBUG';
      return 'INFO';
    }
    
    function extractSource(message) {
      if (message.includes('res_pjsip')) return 'res_pjsip';
      if (message.includes('app_dial')) return 'app_dial';
      if (message.includes('PJSIP')) return 'PJSIP';
      return 'asterisk';
    }
    
    function appendLogEntry(entry) {
      if (!passesFilter(entry)) return;
      
      const logElement = createLogElement(entry);
      logContainer.appendChild(logElement);
    }
    
    function createLogElement(entry) {
      const div = document.createElement('div');
      div.className = `log-entry log-level-${entry.level.toLowerCase()}`;
      div.dataset.entryId = entry.id;
      
      const timestamp = new Date(entry.timestamp).toLocaleTimeString();
      div.innerHTML = `
        <span class="log-timestamp">[${timestamp}]</span>
        <span class="log-source">[${entry.source}]</span>
        <span class="log-level">[${entry.level}]</span>
        <span class="log-message">${escapeHtml(entry.message)}</span>
      `;
      
      return div;
    }
    
    function renderLogs() {
      logContainer.innerHTML = '';
      logs.forEach(entry => {
        if (passesFilter(entry)) {
          appendLogEntry(entry);
        }
      });
    }
    
    function passesFilter(entry) {
      const textFilter = document.getElementById('filterText').value.toLowerCase();
      const levelFilter = document.getElementById('levelFilter').value;
      const sourceFilter = document.getElementById('sourceFilter').value;
      
      if (textFilter && !entry.message.toLowerCase().includes(textFilter)) {
        return false;
      }
      
      if (levelFilter && entry.level !== levelFilter) {
        return false;
      }
      
      if (sourceFilter && entry.source !== sourceFilter) {
        return false;
      }
      
      return true;
    }
    
    function applyFilter() {
      renderLogs();
      updateStats();
    }
    
    function toggleAutoScroll() {
      autoScroll = !autoScroll;
      const btn = document.getElementById('autoScrollBtn');
      btn.textContent = autoScroll ? 'Auto Scroll' : 'Manual Scroll';
      btn.classList.toggle('active', autoScroll);
    }
    
    function clearLogs() {
      logs = [];
      logContainer.innerHTML = '';
      logCount = 0;
      updateStats();
    }
    
    function updateConnectionStatus(connected) {
      const dot = document.getElementById('connectionStatus');
      const text = document.getElementById('connectionText');
      
      if (connected) {
        dot.classList.add('connected');
        text.textContent = 'Connected';
      } else {
        dot.classList.remove('connected');
        text.textContent = 'Disconnected';
      }
    }
    
    function updateStats() {
      const now = Date.now();
      if (now - lastMinute > 60000) {
        document.getElementById('logRate').textContent = logsThisMinute;
        logsThisMinute = 0;
        lastMinute = now;
      }
      
      document.getElementById('totalLogs').textContent = logs.length;
      
      const filteredCount = logs.filter(passesFilter).length;
      document.getElementById('filteredLogs').textContent = filteredCount;
    }
    
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(updateStats, 60000);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    updateStats();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    window.addEventListener('beforeunload', () => {
      socket.emit('unsubscribeLogs', sectionName);
    });
  </script>
</body>
</html> 